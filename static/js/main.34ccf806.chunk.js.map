{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","utils/error-utils.ts","bll/reducers/auth-reducer.ts","bll/reducers/app-reducer.ts","bll/reducers/todolists-reducer.ts","bll/reducers/tasks-reducer.ts","components/_common/AddItemForm/AddItemForm.tsx","components/_common/EditableSpan/EditableSpan.tsx","components/Task/Task.tsx","components/ToDoList/ToDoList.tsx","components/_layout/Container.tsx","pages/ToDoListPage/ToDoListPage.tsx","bll/store.ts","components/Login/Login.tsx","pages/LoginPage/LoginPage.tsx","components/_common/ErrorSnackbar/ErrorSnackbar.tsx","pages/InitializationPage/InitializationPage.tsx","App.tsx","components/_common/svg/SvgLogo.tsx","styles/muiTheme.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","todolistId","put","delete","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppError","error","setAppStatus","status","handleServerNetworkError","message","login","createAsyncThunk","thunkAPI","a","res","resultCode","rejectWithValue","errors","fieldsErrors","undefined","logout","param","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedIn","state","action","payload","value","extraReducers","builder","addCase","fulfilled","authReducer","reducer","actions","initializeApp","isInitialized","appReducer","fetchToDoLists","todoLists","createToDoList","toDoList","item","deleteToDoList","changeToDoListEntityStatus","updateToDoListTitle","changeToDoListFilter","index","findIndex","tl","id","filter","entityStatus","map","unshift","splice","todolistsReducer","fetchTasks","toDoListId","tasks","items","deleteTask","createTask","task","newTask","updateTask","getState","setTaskEntityStatus","find","t","Error","APIModel","description","priority","startDate","deadline","forEach","todoListId","tasksReducer","AddItemForm","React","memo","addItem","disabled","props","useState","setTitle","setError","addItemHandler","itemTitle","trim","ComponentWrapper","TextField","onChange","e","currentTarget","onKeyPress","key","helperText","IconButtonStyled","onClick","color","AddBox","styled","div","IconButton","EditableSpan","editMode","setEditMode","TextFieldWithoutPadding","onBlur","changeTitle","variant","autoFocus","onDoubleClick","Task","removeTask","useCallback","changeStatus","changeTaskStatus","checked","Completed","New","changeTaskTitle","CheckboxStyled","toDoListEntityStatus","StyledEditableSpan","taskStatus","Delete","Checkbox","ToDoList","demoMode","useDispatch","useEffect","todolist","addTask","removeTodolist","changeTodolistTitle","changeTodoListTitle","filterAll","changeFilter","filterActive","filterCompleted","tasksForTodoList","CardStyled","TitleWrapper","TaskTitle","AddTaskWrapper","label","TaskWrapper","ButtonWrapper","ButtonStyled","size","Card","h3","Button","Container","ToDoListPage","todolists","useSelector","auth","addTodoList","removeToDoList","ItemFormContainer","ItemFormWrapper","TodolistContainer","to","header","theme","shadows","rootReducer","combineReducers","app","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","Login","formik","useFormik","validate","values","email","test","password","initialValues","rememberMe","onSubmit","formikHelpers","rejected","setFieldError","field","StyledForm","handleSubmit","TextFieldWrapper","getFieldProps","FormError","type","FormControlLabel","control","form","palette","main","LoginPage","LoginPageWrapper","LoginFormWrapper","Alert","elevation","CustomizedSnackbars","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","InitializationPage","PageWrapper","CircularProgress","grey","App","logoutHandler","StyledAppBar","LinearProgressStyled","AppBarInner","LogoWrapper","StyledSvgLogo","exact","path","render","from","AppBar","height","viewBox","width","xmlns","d","LinearProgress","createMuiTheme","primary","secondary","50","100","200","300","400","500","600","700","800","900","shape","borderRadius","MuiTextField","fullWidth","MuiCheckbox","MuiButton","ReactDOM","StylesProvider","injectFirst","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.34ccf806.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios from 'axios'\r\nimport {RequestStatusType} from \"../bll/reducers/app-reducer\";\r\n\r\n// Instance of axios\r\nconst instance = axios.create ({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'dd304e28-3d68-4d00-a172-a57bb7d47656'\r\n    }\r\n})\r\n\r\n// API\r\nexport const todolistAPI = {\r\n    getTodolists() {\r\n        return instance.get<Array<ToDoListType>>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{item: ToDoListType}>>('todo-lists', {title})\r\n    },\r\n    updateTodolistTitle(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<ResponseTasksType>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`/todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<{item: TaskType}>>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{userId: number}>>('auth/login', data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{userId: number}>>('auth/login')\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>('auth/me')\r\n    }\r\n}\r\n\r\n// Types\r\nexport type ToDoListType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport type FieldErrorType = { field: string, error: string };\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    data: D\r\n}\r\n\r\ntype ResponseTasksType = {\r\n    totalCount: number\r\n    error: string\r\n    items: Array<TaskType>\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n","import {setAppError, setAppStatus} from \"../bll/reducers/app-reducer\";\r\nimport {ResponseType} from '../api/todolist-api'\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppError({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppError({error: 'Sorry. Undefined error have occurred!'}))\r\n    }\r\n    dispatch(setAppStatus({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: any, dispatch: Dispatch) => {\r\n    dispatch(setAppError(error.message ? error.message : 'Sorry. Undefined error have occurred!'))\r\n    dispatch(setAppStatus({status: 'failed'}))\r\n}","import {Dispatch} from \"redux\";\r\nimport {setAppStatus} from \"./app-reducer\";\r\nimport {authAPI, FieldErrorType, LoginParamsType} from \"../../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {AxiosError} from \"axios\";\r\n\r\n// Thunk\r\nexport const login = createAsyncThunk<undefined, LoginParamsType, {\r\n    rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldErrorType> }\r\n}>('auth/login', async (data: LoginParamsType, thunkAPI) => {\r\n\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    const res = await authAPI.login(data)\r\n\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n        }\r\n    } catch (err) {\r\n        const error: AxiosError = err; // You can't type inside catch round brackets.\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n    }\r\n})\r\n\r\nexport const logout = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\n\r\n// Initial state\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\n// Slice\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(login.fulfilled, (state) => {\r\n            state.isLoggedIn = true\r\n        })\r\n        builder.addCase(logout.fulfilled, (state) => {\r\n            state.isLoggedIn = false\r\n        })\r\n    }\r\n})\r\n\r\n// Reducer\r\nexport const authReducer = slice.reducer\r\n\r\n// Actions\r\nexport const {setIsLoggedIn} = slice.actions\r\n\r\n// Thunk creators\r\nexport const _logout = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedIn({value: false}))\r\n                dispatch(setAppStatus({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}","import {authAPI} from \"../../api/todolist-api\";\r\nimport {setIsLoggedIn} from \"./auth-reducer\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n// Thunk\r\nexport const initializeApp = createAsyncThunk('app/initializeApp', async (param, {dispatch}) => {\r\n    const res = await authAPI.me()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedIn({value: true}))\r\n    }\r\n})\r\n\r\n// Slice\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatus(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppError(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(initializeApp.fulfilled, (state) => {\r\n            state.isInitialized = true\r\n        })\r\n    }\r\n})\r\n\r\n// Reducer\r\nexport const appReducer = slice.reducer\r\n\r\n// Actions\r\nexport const {setAppStatus, setAppError} = slice.actions\r\n\r\n// Types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = {\r\n    status: RequestStatusType,\r\n    error: string | null\r\n    isInitialized: boolean\r\n}","import {todolistAPI, ToDoListType} from \"../../api/todolist-api\";\r\nimport {RequestStatusType, setAppStatus} from \"./app-reducer\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\n// Thunk\r\nexport const fetchToDoLists = createAsyncThunk('todolists/fetchToDoLists', async (param, {dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    const res = await todolistAPI.getTodolists()\r\n    try {\r\n        dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {todoLists: res.data}\r\n    }\r\n    catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue(error)\r\n    }\r\n})\r\n\r\nexport const createToDoList = createAsyncThunk('todolists/createToDoList', async (param: { title: string }, {dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    const res = await todolistAPI.createTodolist(param.title)\r\n    try {\r\n        dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {toDoList: res.data.data.item}\r\n    }\r\n    catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue(error)\r\n    }\r\n})\r\n\r\nexport const deleteToDoList = createAsyncThunk('todolists/deleteToDoList', async (param: { todolistId: string }, {dispatch}) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    dispatch(changeToDoListEntityStatus({todolistId: param.todolistId, status: 'loading'}))\r\n    await todolistAPI.deleteTodolist(param.todolistId)\r\n    dispatch(setAppStatus({status: 'succeeded'}))\r\n    return {todolistId: param.todolistId}\r\n})\r\n\r\nexport const updateToDoListTitle = createAsyncThunk('todolists/updateToDoListTitle', async (param: { todolistId: string, title: string }, {dispatch}) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    await todolistAPI.updateTodolistTitle(param.todolistId, param.title)\r\n    dispatch(setAppStatus({status: 'succeeded'}))\r\n    return (param)\r\n})\r\n\r\n// Reducer\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as Array<ToDoListDomainType>,\r\n    reducers: {\r\n        changeToDoListFilter(state, action: PayloadAction<{ todolistId: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeToDoListEntityStatus(state, action: PayloadAction<{ todolistId: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(fetchToDoLists.fulfilled, (state, action) => {\r\n            return action.payload.todoLists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        })\r\n        builder.addCase(createToDoList.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload.toDoList, filter: 'all', entityStatus: 'idle'})\r\n        })\r\n        builder.addCase(deleteToDoList.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(updateToDoListTitle.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            state[index].title = action.payload.title\r\n        })\r\n    }\r\n})\r\n\r\n// Reducer\r\nexport const todolistsReducer = slice.reducer\r\n\r\n// Action\r\nexport const {\r\n    changeToDoListFilter,\r\n    changeToDoListEntityStatus,\r\n} = slice.actions\r\n\r\n// Types\r\nexport type ToDoListDomainType = ToDoListType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'","import {createToDoList, deleteToDoList, fetchToDoLists} from \"./todolists-reducer\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistAPI, UpdateTaskModelType} from \"../../api/todolist-api\";\r\nimport {AppRootStateT} from \"../store\";\r\nimport {RequestStatusType, setAppStatus} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport const fetchTasks = createAsyncThunk('tasks/fetchTasks', async (toDoListId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    const res = await todolistAPI.getTasks(toDoListId)\r\n    const tasks = res.data.items\r\n    thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n    return {tasks, toDoListId}\r\n})\r\n\r\nexport const deleteTask = createAsyncThunk('tasks/deleteTask', async (param: { taskId: string, toDoListId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        await todolistAPI.deleteTask(param.toDoListId, param.taskId)\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {taskId: param.taskId, toDoListId: param.toDoListId}\r\n    } catch (error) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue(error)\r\n    }\r\n})\r\n\r\nexport const createTask = createAsyncThunk('tasks/createTask', async (param: { title: string, todolistId: string }, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    const res = await todolistAPI.createTask(param.todolistId, param.title)\r\n\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            const task = res.data.data.item\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {newTask: task}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n\r\n})\r\n\r\nexport const updateTask = createAsyncThunk('tasks/updateTaskTC', async (param: { taskId: string, model: UpdateDomainTaskModelType, todolistId: string }, {\r\n    dispatch,\r\n    getState,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    dispatch(setTaskEntityStatus({taskId: param.taskId, todolistId: param.todolistId, status: 'loading'}))\r\n\r\n    const state = getState() as AppRootStateT\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n\r\n    if (!task) {\r\n        dispatch(setAppStatus({status: 'failed'}))\r\n        dispatch(setTaskEntityStatus({taskId: param.taskId, todolistId: param.todolistId, status: 'failed'}))\r\n        throw new Error('Task not found in the state')\r\n    }\r\n\r\n    const APIModel: UpdateTaskModelType = {\r\n        title: task.title,\r\n        description: task.description,\r\n        status: task.status,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        deadline: task.deadline,\r\n        ...param.model\r\n    }\r\n\r\n    const res = await todolistAPI.updateTask(param.todolistId, param.taskId, APIModel)\r\n\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n            dispatch(setTaskEntityStatus({taskId: param.taskId, todolistId: param.todolistId, status: 'succeeded'}))\r\n            return param\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\n// Reducer\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setTaskEntityStatus(state, action: PayloadAction<{ taskId: string, todolistId: string, status: RequestStatusType }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], entityStatus: action.payload.status}\r\n            }\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(createToDoList.fulfilled, (state, action) => {\r\n            state[action.payload.toDoList.id] = []\r\n        })\r\n        builder.addCase(deleteToDoList.fulfilled, (state, action) => {\r\n            delete state[action.payload.todolistId]\r\n        })\r\n        builder.addCase(fetchToDoLists.fulfilled, (state, action) => {\r\n            action.payload.todoLists.forEach((tl: any) => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n        builder.addCase(fetchTasks.fulfilled, (state, action) => {\r\n            state[action.payload.toDoListId] = action.payload.tasks\r\n        })\r\n        builder.addCase(deleteTask.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.toDoListId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(createTask.fulfilled, (state, action) => {\r\n            state[action.payload.newTask.todoListId].unshift(action.payload.newTask)\r\n        })\r\n        builder.addCase(updateTask.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        })\r\n    }\r\n})\r\n\r\n// Reducer\r\nexport const tasksReducer = slice.reducer\r\n\r\n// Actions\r\nexport const {setTaskEntityStatus} = slice.actions\r\n\r\n\r\n// Types\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {TextFieldProps} from \"@material-ui/core/TextField/TextField\";\r\nimport styled from \"styled-components\";\r\n\r\n// Component\r\nexport const AddItemForm = React.memo(({addItem, disabled = false, ...props}: AddItemFormPropsType) => {\r\n\r\n    // Local state\r\n    const [title, setTitle] = useState<string>('');\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    // Local functions\r\n    const addItemHandler = () => {\r\n        const itemTitle = title.trim()\r\n        if (itemTitle) {\r\n            addItem(itemTitle);\r\n            setTitle('')\r\n        } else {\r\n            setError(\"Title is required!\")\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        setError(null)\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") addItemHandler()\r\n    }\r\n\r\n    return (\r\n        <ComponentWrapper>\r\n            <TextField\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                error={!!error}\r\n                helperText={error}\r\n                disabled={disabled}\r\n                {...props}\r\n            />\r\n            <IconButtonStyled onClick={addItemHandler} color={'primary'} disabled={disabled}>\r\n                <AddBox/>\r\n            </IconButtonStyled>\r\n        </ComponentWrapper>\r\n    )\r\n})\r\n\r\n// Styles\r\nconst ComponentWrapper = styled.div`\r\n  position: relative;\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n`\r\n\r\nconst IconButtonStyled = styled(IconButton)<any>`\r\n  margin-left: 10px;\r\n`\r\n\r\n// Types\r\nexport type AddItemFormPropsType = TextFieldProps & {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport styled from \"styled-components\";\r\n\r\n// Component\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n\r\n    // Local state\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n\r\n    // Local functions\r\n    const onEditMode = () => {\r\n        if (!props.disabled) {\r\n            setEditMode(true)\r\n        }\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        if (title.trim()) {\r\n            props.changeTitle(title.trim())\r\n        }\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n    return (\r\n        editMode\r\n            ? <TextFieldWithoutPadding onBlur={offEditMode}\r\n                                       onChange={changeTitle}\r\n                                       variant={'standard'}\r\n                                       value={title}\r\n                                       autoFocus\r\n                                       disabled={props.disabled}/>\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n})\r\n\r\n// Styles\r\nconst TextFieldWithoutPadding = styled(TextField)<any>`\r\n  position: relative;\r\n\r\n  & .MuiInputBase-input {\r\n    padding: 0;\r\n    font-size: 14px;\r\n  }\r\n\r\n  & .MuiInput-underline:before {\r\n    position: absolute;\r\n    top: 20px;\r\n  }\r\n\r\n  & .MuiInput-underline:after {\r\n    position: absolute;\r\n    top: 20px;\r\n  }\r\n`\r\n\r\n// Types\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n    disabled?: boolean\r\n}","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../_common/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../api/todolist-api\";\r\nimport styled from \"styled-components\";\r\nimport {RequestStatusType} from \"../../bll/reducers/app-reducer\";\r\n\r\n// Component\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    // Callbacks\r\n    const removeTask = useCallback(() => {\r\n        props.removeTask(props.task.id, props.toDoListId)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTaskStatus(props.task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, props.toDoListId)\r\n    }, [])\r\n\r\n    const changeTitle = useCallback((title: string) => {\r\n        props.changeTaskTitle(props.task.id, title, props.toDoListId)\r\n    }, [])\r\n\r\n    // Render\r\n    return (\r\n        <ComponentWrapper key={props.task.id}>\r\n            <CheckboxStyled\r\n                checked={props.task.status === TaskStatuses.Completed}\r\n                onChange={changeStatus}\r\n                disabled={props.task.entityStatus === 'loading' || props.toDoListEntityStatus === 'loading'}/>\r\n            <StyledEditableSpan taskStatus={props.task.status}>\r\n                <EditableSpan\r\n                    title={props.task.title}\r\n                    changeTitle={changeTitle}\r\n                    disabled={props.task.entityStatus === 'loading' || props.toDoListEntityStatus === 'loading'}/>\r\n            </StyledEditableSpan>\r\n            <IconButtonStyled onClick={removeTask} disabled={props.task.entityStatus === 'loading' || props.toDoListEntityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButtonStyled>\r\n        </ComponentWrapper>\r\n    )\r\n})\r\n\r\n// Styled components\r\nconst ComponentWrapper = styled.div`\r\n  position: relative;\r\n\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  width: 100%;\r\n`\r\n\r\nconst StyledEditableSpan = styled.div<any>`\r\n  width: 80%;\r\n\r\n  padding-left: 45px;\r\n\r\n  opacity: ${props => (props.taskStatus === TaskStatuses.Completed) ? .5 : 1};\r\n`\r\n\r\nconst CheckboxStyled = styled(Checkbox)<any>`\r\n  position: absolute;\r\n  z-index: 1;\r\n  top: -10px;\r\n\r\n  opacity: ${props => (props.taskStatus === TaskStatuses.Completed) ? .5 : 1};\r\n  margin-right: 5px;\r\n`\r\n\r\nconst IconButtonStyled = styled(IconButton)`\r\n  position: absolute;\r\n  right: 0;\r\n  top: -15px;\r\n`\r\n\r\n// Types\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    toDoListId: string\r\n    toDoListEntityStatus: RequestStatusType\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from \"../_common/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../_common/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Button, Card, IconButton} from \"@material-ui/core\";\r\nimport {FilterValuesType, ToDoListDomainType} from \"../../bll/reducers/todolists-reducer\";\r\nimport {Task} from \"../Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../api/todolist-api\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasks} from \"../../bll/reducers/tasks-reducer\";\r\nimport styled from \"styled-components\";\r\n\r\n// Component\r\nexport const ToDoList = React.memo(({demoMode = false, ...props}: PropsType) => {\r\n\r\n    // Connect\r\n    const dispatch = useDispatch()\r\n\r\n    // Side effects\r\n    useEffect(() => {\r\n        if (!demoMode) {\r\n            dispatch(fetchTasks(props.todolist.id))\r\n        }\r\n    }, [])\r\n\r\n    // Callbacks\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodoListTitle(props.todolist.id, title)\r\n    }, [])\r\n\r\n    const filterAll = useCallback(() => {\r\n        props.changeFilter(props.todolist.id, 'all')\r\n    }, [])\r\n\r\n    const filterActive = useCallback(() => {\r\n        props.changeFilter(props.todolist.id, 'active')\r\n    }, [])\r\n\r\n    const filterCompleted = useCallback(() => {\r\n        props.changeFilter(props.todolist.id, 'completed')\r\n    }, [])\r\n\r\n    // Component logic\r\n    let tasksForTodoList = props.tasks;\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodoList = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodoList = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    // Render\r\n    return (\r\n        <CardStyled>\r\n            <TitleWrapper>\r\n                <TaskTitle>\r\n                    <EditableSpan title={props.todolist.title} changeTitle={changeTodolistTitle}\r\n                                  disabled={props.todolist.entityStatus === 'loading'}/>\r\n                </TaskTitle>\r\n                <IconButtonStyled onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </IconButtonStyled>\r\n            </TitleWrapper>\r\n\r\n            {/*Add new task input*/}\r\n            <AddTaskWrapper>\r\n                <AddItemForm addItem={addTask} label={'Add task'} disabled={props.todolist.entityStatus === 'loading'}/>\r\n            </AddTaskWrapper>\r\n\r\n            {/*Tasks*/}\r\n            {tasksForTodoList.map(task => {\r\n                    return (\r\n                        <TaskWrapper key={task.id}>\r\n                            <Task task={task}\r\n                                  toDoListId={props.todolist.id}\r\n                                  toDoListEntityStatus={props.todolist.entityStatus}\r\n                                  changeTaskStatus={props.changeTaskStatus}\r\n                                  changeTaskTitle={props.changeTaskTitle}\r\n                                  removeTask={props.removeTask}/>\r\n                        </TaskWrapper>\r\n                    )\r\n                })\r\n            }\r\n\r\n            {/*Filter buttons*/}\r\n            <ButtonWrapper>\r\n                <ButtonStyled\r\n                    color={props.todolist.filter === 'all' ? 'primary' : 'default'}\r\n                    onClick={filterAll}\r\n                    size={'small'}\r\n                    disabled={props.todolist.entityStatus === 'loading'}>All\r\n                </ButtonStyled>\r\n                <ButtonStyled\r\n                    color={props.todolist.filter === 'active' ? 'primary' : 'default'}\r\n                    onClick={filterActive}\r\n                    size={'small'}\r\n                    disabled={props.todolist.entityStatus === 'loading'}>Active\r\n                </ButtonStyled>\r\n                <ButtonStyled\r\n                    color={props.todolist.filter === 'completed' ? 'primary' : 'default'}\r\n                    onClick={filterCompleted}\r\n                    size={'small'}\r\n                    disabled={props.todolist.entityStatus === 'loading'}>Completed\r\n                </ButtonStyled>\r\n            </ButtonWrapper>\r\n        </CardStyled>\r\n    );\r\n})\r\n\r\n// Styles\r\nconst CardStyled = styled(Card)`\r\n  position: relative;\r\n\r\n  margin-left: 25px;\r\n  margin-bottom: 25px;\r\n  padding: 30px;\r\n\r\n  width: 380px;\r\n  height: 100%;\r\n`\r\n\r\nconst TitleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n\r\n  margin-bottom: 20px;\r\n`\r\n\r\nconst TaskTitle = styled.h3`\r\n  width: 80%;\r\n`\r\n\r\nconst IconButtonStyled = styled(IconButton)`\r\n  position: absolute;\r\n  top: 15px;\r\n  right: 30px;\r\n`\r\n\r\nconst ButtonWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  justify-self: end;\r\n`\r\n\r\nconst ButtonStyled = styled(Button)`\r\n  padding: 7px 22px;\r\n`\r\n\r\nconst AddTaskWrapper = styled.div`\r\n  margin-bottom: 20px;\r\n`\r\n\r\nconst TaskWrapper = styled.div`\r\n  margin-bottom: 20px;\r\n\r\n  :last-child {\r\n    margin-bottom: 30px;\r\n  }\r\n`\r\n\r\n// Types\r\ntype PropsType = {\r\n    todolist: ToDoListDomainType\r\n    tasks: Array<TaskType>\r\n    addTask: (todolistId: string, title: string) => void\r\n    changeFilter: (todolistId: string, filterValue: FilterValuesType) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeTodoListTitle: (todolistId: string, title: string) => void\r\n    demoMode?: boolean\r\n}","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  \r\n  padding: 0 60px;\r\n  \r\n  width: 100%;\r\n  height: 100%;\r\n`","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateT} from \"../../bll/store\";\r\nimport {\r\n    changeToDoListFilter,\r\n    createToDoList,\r\n    deleteToDoList,\r\n    fetchToDoLists,\r\n    FilterValuesType,\r\n    ToDoListDomainType,\r\n    updateToDoListTitle\r\n} from \"../../bll/reducers/todolists-reducer\";\r\nimport {createTask, deleteTask, TasksStateType, updateTask} from \"../../bll/reducers/tasks-reducer\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {TaskStatuses} from \"../../api/todolist-api\";\r\nimport {ToDoList} from \"../../components/ToDoList/ToDoList\";\r\nimport {AddItemForm} from \"../../components/_common/AddItemForm/AddItemForm\";\r\nimport styled from \"styled-components\";\r\nimport {Container} from \"../../components/_layout/Container\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const ToDoListPage: React.FC<PropsType> = ({demoMode = false}) => {\r\n\r\n    // Connect\r\n    const dispatch = useDispatch()\r\n    const todolists = useSelector<AppRootStateT, Array<ToDoListDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateT, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateT, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    // Side effects\r\n    useEffect(() => {\r\n        if (!demoMode || !isLoggedIn) {\r\n            dispatch(fetchToDoLists())\r\n        }\r\n    }, [])\r\n\r\n    // Callbacks\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(createToDoList({title}))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(createTask({title, todolistId}))\r\n    }, [])\r\n\r\n    const changeTaskStatus = useCallback((taskId: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTask({taskId, model: {status}, todolistId}))\r\n    }, [])\r\n\r\n    const removeTask = useCallback((taskId: string, toDoListId: string) => {\r\n        dispatch(deleteTask({taskId, toDoListId}))\r\n    }, [])\r\n\r\n    const removeToDoList = useCallback((todolistId: string) => {\r\n        dispatch(deleteToDoList({todolistId}))\r\n    }, [])\r\n\r\n    const changeFilter = useCallback((todolistId: string, filter: FilterValuesType) => {\r\n        dispatch(changeToDoListFilter({todolistId, filter}))\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback((taskId: string, title: string, todolistId: string) => {\r\n        dispatch(updateTask({taskId, model: {title}, todolistId}))\r\n    }, [])\r\n\r\n    const changeTodoListTitle = useCallback((todolistId: string, title: string) => {\r\n        dispatch(updateToDoListTitle({todolistId, title}))\r\n    }, [])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ItemFormContainer>\r\n                <ItemFormWrapper>\r\n                    <AddItemForm addItem={addTodoList} label={'Add to do list'}/>\r\n                </ItemFormWrapper>\r\n            </ItemFormContainer>\r\n            <Container>\r\n                <TodolistContainer>\r\n                    {todolists.map(tl => {\r\n                        let tasksForTodoList = tasks[tl.id]\r\n                        return (\r\n                            <ToDoList\r\n                                demoMode={demoMode}\r\n                                key={tl.id}\r\n                                todolist={tl}\r\n                                tasks={tasksForTodoList}\r\n                                removeTask={removeTask}\r\n                                addTask={addTask}\r\n                                changeFilter={changeFilter}\r\n                                changeTaskStatus={changeTaskStatus}\r\n                                removeTodolist={removeToDoList}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodoListTitle={changeTodoListTitle}\r\n                            />\r\n                        )\r\n                    })}\r\n                </TodolistContainer>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n// Styled components\r\nconst ItemFormContainer = styled.header`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  \r\n  box-shadow: ${({theme}) => theme.shadows[4]};\r\n\r\n  margin-bottom: 30px;\r\n\r\n  width: 100vw;\r\n  height: 100px;\r\n`\r\n\r\nconst ItemFormWrapper = styled.div`\r\n  width: 30%;\r\n  min-width: 300px;\r\n`\r\n\r\nconst TodolistContainer = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n\r\n  // The margin left is negative to compensate for the positive margin of the ToDoListCard... \r\n  margin-left: -25px;\r\n  height: 100%;\r\n\r\n  @media (max-width: 2120px) {\r\n    width: 1620px;\r\n  }\r\n  \r\n  @media (max-width: 1715px) {\r\n    width: 1215px;\r\n  }\r\n  \r\n  @media (max-width: 1310px) {\r\n    width: 810px;\r\n  }\r\n\r\n  @media (max-width: 905px) {\r\n    width: 405px;\r\n  }\r\n`\r\n\r\n// Type\r\ntype PropsType = {\r\n    demoMode?: boolean\r\n}","import {combineReducers} from \"redux\";\r\nimport {todolistsReducer} from \"./reducers/todolists-reducer\";\r\nimport {tasksReducer} from \"./reducers/tasks-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./reducers/app-reducer\";\r\nimport {authReducer} from \"./reducers/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n// Redux\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\n// Types\r\nexport type AppRootStateT = ReturnType<typeof rootReducer>\r\nexport type AppDispatchT = typeof store.dispatch\r\n\r\n// Custom hooks\r\nexport const useAppDispatch = () => useDispatch<AppDispatchT>()\r\n\r\n// Utilities\r\n// @ts-ignore\r\nwindow.store = store;","import React from \"react\";\r\nimport {Button, Checkbox, FormControlLabel, TextField} from \"@material-ui/core\";\r\nimport {FormikHelpers, useFormik} from \"formik\";\r\nimport {login} from \"../../bll/reducers/auth-reducer\";\r\nimport styled from \"styled-components\";\r\nimport {AppDispatchT, useAppDispatch} from \"../../bll/store\";\r\n\r\ntype PropsType = {}\r\n\r\ntype FormikValueT = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\ntype FormikErrorT = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login: React.FC<PropsType> = () => {\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const formik = useFormik({\r\n\r\n        validate: (values) => {\r\n            const errors: FormikErrorT = {}\r\n            if (!values.email) {\r\n                errors.email = 'Email is required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password is required'\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Password must be higher then 3'\r\n            }\r\n            return errors\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: async (values, formikHelpers: FormikHelpers<FormikValueT>) => {\r\n            const action = await dispatch(login(values))\r\n\r\n            if (login.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors?.length) {\r\n                    const error = action.payload?.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                }\r\n            }\r\n        }\r\n    })\r\n\r\n    return (\r\n        <StyledForm onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <p>Use my test account credentials to log in:</p>\r\n                <p>Email: dev000test111@gmail.com</p>\r\n                <p>Password: react-redux-100%</p>\r\n            </div>\r\n\r\n            <TextFieldWrapper>\r\n                <TextField label='Email' {...formik.getFieldProps('email')}/>\r\n                {formik.errors.email ? <FormError>{formik.errors.email}</FormError> : null}\r\n            </TextFieldWrapper>\r\n\r\n            <TextFieldWrapper>\r\n                <TextField label='Password' {...formik.getFieldProps('password')} type='password'/>\r\n                {formik.errors.password ? <FormError>{formik.errors.password}</FormError> : null}\r\n            </TextFieldWrapper>\r\n\r\n            <FormControlLabel label='Remember me'\r\n                              control={\r\n                                  <Checkbox {...formik.getFieldProps('rememberMe')}\r\n                                            checked={formik.values.rememberMe}/>\r\n                              }/>\r\n\r\n            <Button variant={'contained'} color={'primary'} type='submit'>Login</Button>\r\n        </StyledForm>\r\n    )\r\n}\r\n\r\nconst StyledForm = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-basis: 400px;\r\n`\r\n\r\nconst TextFieldWrapper = styled.div`\r\n  position: relative;\r\n\r\n  margin-bottom: 35px;\r\n`\r\n\r\nconst FormError = styled.div`\r\n  position: absolute;\r\n  bottom: -23px;\r\n  color: ${({theme}) => theme.palette.error.main};\r\n`","import React from \"react\";\r\nimport {Login} from \"../../components/Login/Login\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateT} from \"../../bll/store\";\r\nimport {Container} from \"../../components/_layout/Container\";\r\nimport styled from \"styled-components\";\r\n\r\ntype PropsType = {}\r\n\r\nexport const LoginPage: React.FC<PropsType> = () => {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateT, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return (\r\n        <LoginPageWrapper>\r\n            <Container>\r\n                <LoginFormWrapper>\r\n                    <Login/>\r\n                </LoginFormWrapper>\r\n            </Container>\r\n        </LoginPageWrapper>\r\n    )\r\n}\r\n\r\nconst LoginPageWrapper = styled.div`\r\n  height: calc(100vh - 100px);\r\n`\r\n\r\nconst LoginFormWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  \r\n  margin-bottom: 200px;\r\n`","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateT} from \"../../../bll/store\";\r\nimport {setAppError} from \"../../../bll/reducers/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport function CustomizedSnackbars() {\r\n\r\n    const error = useSelector<AppRootStateT, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        // Prevents closing the error message on mouse click away.\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        dispatch(setAppError({error: null}))\r\n    };\r\n\r\n    const isOpen = error !== null\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={4000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n\r\n// Cheat shit for severity\r\n// <Alert severity=\"error\">This is an error message!</Alert>\r\n// <Alert severity=\"warning\">This is a warning message!</Alert>\r\n// <Alert severity=\"info\">This is an information message!</Alert>\r\n// <Alert severity=\"success\">This is a success message!</Alert>","import {CircularProgress} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const InitializationPage = () => {\r\n    return (\r\n        <PageWrapper>\r\n            <CircularProgress/>\r\n        </PageWrapper>\r\n    )\r\n}\r\n\r\n// Styles\r\nconst PageWrapper = styled.div`\r\n  position: absolute;\r\n  z-index: 100;\r\n  \r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  \r\n  width: 100vw;\r\n  height: 100vh;\r\n  \r\n  background-color: ${({theme}) => theme.palette.grey['50']};\r\n`","import React, {useCallback, useEffect} from 'react';\r\nimport styled from 'styled-components';\r\nimport {ToDoListPage} from \"./pages/ToDoListPage/ToDoListPage\";\r\nimport {AppBar, Button, LinearProgress} from \"@material-ui/core\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateT} from \"./bll/store\";\r\nimport {initializeApp, RequestStatusType} from \"./bll/reducers/app-reducer\";\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {LoginPage} from \"./pages/LoginPage/LoginPage\";\r\nimport {CustomizedSnackbars} from \"./components/_common/ErrorSnackbar/ErrorSnackbar\";\r\nimport {logout} from \"./bll/reducers/auth-reducer\";\r\nimport {Container} from \"./components/_layout/Container\";\r\nimport {SvgLogo} from './components/_common/svg/SvgLogo';\r\nimport {InitializationPage} from \"./pages/InitializationPage/InitializationPage\";\r\n\r\n// Component\r\nexport const App: React.FC<PropsType> = ({demoMode = false}) => {\r\n\r\n    const status = useSelector<AppRootStateT, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateT, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateT, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeApp())\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logout())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <InitializationPage/>\r\n    }\r\n\r\n\r\n    // Render\r\n    return (\r\n        <div>\r\n            <StyledAppBar color={'primary'}>\r\n                {status === 'loading' && <LinearProgressStyled color={'secondary'}/>}\r\n                <Container>\r\n                    <AppBarInner>\r\n                        <LogoWrapper>\r\n                            <StyledSvgLogo/>\r\n                            <h1>ToDoList</h1>\r\n                        </LogoWrapper>\r\n                        {isLoggedIn && <Button variant={'contained'} color={'secondary'} onClick={logoutHandler}>Log out</Button>}\r\n                    </AppBarInner>\r\n                </Container>\r\n            </StyledAppBar >\r\n            <Switch>\r\n                <Route exact path={'/'} render={() => <ToDoListPage demoMode={demoMode}/>}/>\r\n                <Route path={'/login'} render={() => <LoginPage/>}/>\r\n\r\n                <Route path={'/404'} render={() => <p>Make a 404 page my friend :)</p>}/>\r\n                <Redirect from={'*'} to={'/404'}/>\r\n            </Switch>\r\n            <CustomizedSnackbars/>\r\n        </div>\r\n    )\r\n}\r\n\r\n// Styled components\r\nconst StyledAppBar = styled(AppBar)`\r\n  position: relative;\r\n  z-index: 100;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  \r\n  width: 100%;\r\n  height: 100px;\r\n`\r\n\r\nconst AppBarInner = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  \r\n  width: 100%;\r\n`\r\nconst LogoWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst StyledSvgLogo = styled(SvgLogo)`\r\n  margin-right: 20px;\r\n  \r\n  width: 40px;\r\n  height: 40px;\r\n  \r\n  fill: ${({theme}) => theme.palette.grey[50]};\r\n`\r\n\r\nconst LinearProgressStyled = styled(LinearProgress)`\r\n  position: absolute;\r\n  bottom: 0;\r\n\r\n  width: 100%;\r\n`\r\n\r\n// Types\r\ntype PropsType = {\r\n    demoMode?: boolean\r\n}","import * as React from \"react\";\n\nexport function SvgLogo(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      id=\"to-do-list_svg__Capa_1\"\n      height={512}\n      viewBox=\"0 0 512 512\"\n      width={512}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path d=\"M391 452h60V0H121v61h270z\" />\n      <path d=\"M166 512h195V91H61v316h105zm45-316h105v30H211zm0 75h105v30H211zm0 75h105v30H211zm-94.395-175.605L136 189.789l34.395-34.395 21.211 21.211L136 232.211l-40.605-40.605zm0 75L136 264.789l34.395-34.395 21.211 21.211L136 307.211l-40.605-40.605zM136 382.211l-40.605-40.605 21.211-21.211L136 339.789l34.395-34.395 21.211 21.211z\" />\n      <path d=\"M136 437H84.789L136 488.211z\" />\n    </svg>\n  );\n}\n","import {createMuiTheme} from \"@material-ui/core\";\r\n\r\n\r\n\r\nexport const theme = createMuiTheme({\r\n    // typography: {\r\n    //     fontFamily: `'Montserrat', san-serif`,\r\n    // },\r\n    palette: {\r\n        primary: {\r\n            main: '#e5731b'\r\n        },\r\n        secondary: {\r\n            main: '#4371be'\r\n        },\r\n        grey: {\r\n            50: '#fafafa',\r\n            100: '#f5f5f5',\r\n            200: '#eeeeee',\r\n            300: '#e0e0e0',\r\n            400: '#bdbdbd',\r\n            500: '#9e9e9e',\r\n            600: '#757575',\r\n            700: '#616161',\r\n            800: '#424242',\r\n            900: '#212121',\r\n        },\r\n        error: {\r\n            main: '#ba1212'\r\n        }\r\n    },\r\n    shape: {\r\n        borderRadius: 0\r\n    },\r\n    props: {\r\n        MuiTextField: {\r\n            fullWidth: true,\r\n            variant: 'outlined',\r\n        },\r\n        MuiCheckbox: {\r\n            color: 'primary'\r\n        },\r\n        MuiButton: {\r\n            variant: 'outlined'\r\n        }\r\n    },\r\n})","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {App} from \"./App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./bll/store\";\r\nimport {MuiThemeProvider, StylesProvider} from '@material-ui/core/styles';\r\nimport {ThemeProvider} from \"styled-components\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {CssBaseline} from \"@material-ui/core\";\r\nimport {theme} from \"./styles/muiTheme\";\r\n\r\nReactDOM.render(\r\n    <StylesProvider injectFirst>\r\n        <MuiThemeProvider theme={theme}>\r\n            <ThemeProvider theme={theme}>\r\n                <CssBaseline />\r\n                <Provider store={store}>\r\n                    <HashRouter>\r\n                        <App/>\r\n                    </HashRouter>\r\n                </Provider>\r\n            </ThemeProvider>\r\n        </MuiThemeProvider>\r\n    </StylesProvider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}